// Mocks generated by Mockito 5.1.0 from annotations
// in azure_application_insights/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i6;

import 'package:azure_application_insights/src/client.dart' as _i7;
import 'package:azure_application_insights/src/context.dart' as _i3;
import 'package:azure_application_insights/src/processing.dart' as _i2;
import 'package:azure_application_insights/src/telemetry.dart' as _i8;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeProcessor_0 extends _i1.Fake implements _i2.Processor {}

class _FakeTelemetryContext_1 extends _i1.Fake implements _i3.TelemetryContext {
}

class _FakeResponse_2 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_3 extends _i1.Fake implements _i4.StreamedResponse {
}

class _FakeByteStream_4 extends _i1.Fake implements _i4.ByteStream {}

/// A class which mocks [Processor].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessor extends _i1.Mock implements _i2.Processor {
  MockProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void process({List<_i2.ContextualTelemetryItem>? contextualTelemetryItems}) =>
      super.noSuchMethod(
          Invocation.method(#process, [],
              {#contextualTelemetryItems: contextualTelemetryItems}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i4.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i6.Uint8List(0)) as _i6.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
}

/// A class which mocks [TelemetryClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTelemetryClient extends _i1.Mock implements _i7.TelemetryClient {
  MockTelemetryClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Processor get processor =>
      (super.noSuchMethod(Invocation.getter(#processor),
          returnValue: _FakeProcessor_0()) as _i2.Processor);
  @override
  _i3.TelemetryContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeTelemetryContext_1()) as _i3.TelemetryContext);
  @override
  void trackError(
          {_i8.Severity? severity,
          Object? error,
          StackTrace? stackTrace,
          String? problemId,
          Map<String, Object>? additionalProperties = const {},
          DateTime? timestamp}) =>
      super.noSuchMethod(
          Invocation.method(#trackError, [], {
            #severity: severity,
            #error: error,
            #stackTrace: stackTrace,
            #problemId: problemId,
            #additionalProperties: additionalProperties,
            #timestamp: timestamp
          }),
          returnValueForMissingStub: null);
  @override
  void trackEvent(
          {String? name,
          Map<String, Object>? additionalProperties = const {},
          DateTime? timestamp}) =>
      super.noSuchMethod(
          Invocation.method(#trackEvent, [], {
            #name: name,
            #additionalProperties: additionalProperties,
            #timestamp: timestamp
          }),
          returnValueForMissingStub: null);
  @override
  void trackPageView(
          {String? name,
          String? id,
          Duration? duration,
          String? url,
          Map<String, Object>? additionalProperties = const {},
          DateTime? timestamp}) =>
      super.noSuchMethod(
          Invocation.method(#trackPageView, [], {
            #name: name,
            #id: id,
            #duration: duration,
            #url: url,
            #additionalProperties: additionalProperties,
            #timestamp: timestamp
          }),
          returnValueForMissingStub: null);
  @override
  void trackRequest(
          {String? id,
          Duration? duration,
          String? responseCode,
          String? source,
          String? name,
          bool? success,
          String? url,
          Map<String, Object>? additionalProperties = const {},
          DateTime? timestamp}) =>
      super.noSuchMethod(
          Invocation.method(#trackRequest, [], {
            #id: id,
            #duration: duration,
            #responseCode: responseCode,
            #source: source,
            #name: name,
            #success: success,
            #url: url,
            #additionalProperties: additionalProperties,
            #timestamp: timestamp
          }),
          returnValueForMissingStub: null);
  @override
  void trackTrace(
          {_i8.Severity? severity,
          String? message,
          Map<String, Object>? additionalProperties = const {},
          DateTime? timestamp}) =>
      super.noSuchMethod(
          Invocation.method(#trackTrace, [], {
            #severity: severity,
            #message: message,
            #additionalProperties: additionalProperties,
            #timestamp: timestamp
          }),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientBase extends _i1.Mock implements _i4.Client {
  MockClientBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i6.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i6.Uint8List>.value(_i6.Uint8List(0)))
          as _i5.Future<_i6.Uint8List>);
  @override
  _i5.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3()))
          as _i5.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [StreamedResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamedResponseBase extends _i1.Mock
    implements _i4.StreamedResponse {
  MockStreamedResponseBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ByteStream get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: _FakeByteStream_4()) as _i4.ByteStream);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
}
